{
  // Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  // Modules
  "import x from '": {
    "prefix": "imp",
    "body": "import ${2:*} from '$1'$3"
  },

  // Logging
  "console.log": {
    "prefix": "cl",
    "body": "console.log(${1:'here'})$0"
  },
  "console.log('var', var)": {
    "prefix": "vl",
    "body": "console.log('$1', $1)$0"
  },
  "console.log({var})": {
    "prefix": "ol",
    "body": "console.log({$1})$0"
  },

  // Tooling
  "eslint rule": {
    "prefix": "esl",
    "body": ["/*", "eslint", "  $1: \"off\",", "*/"]
  },
  "eslint disable next line": {
    "prefix": "eslnl",
    "body": "// eslint-disable-next-line $1"
  },
  "eslint disable line": {
    "prefix": "esll",
    "body": "// eslint-disable-line $1"
  },

  // OOP
  "constructor": {
    "prefix": "ctor",
    "body": ["constructor(...args) {", "  super(...args)", "  $0", "}"]
  },

  // Error handling
  "try/catch": {
    "prefix": "try",
    "body": ["try {", "  $1", "} catch (error) {", "  $0", "}"]
  },
  "throw log": {
    "prefix": "tl",
    "body": "throw new Error(JSON.stringify({$0}, null, 2))"
  },

  // Testing
  "Jest test": {
    "prefix": "test",
    "body": ["test('$1', () => {", "  $0", "})"]
  },
  "Jest async test": {
    "prefix": "atest",
    "body": ["test('$1', async () => {", "  $0", "})"]
  },

  // JS functions
  "async function": {
    "prefix": "afun",
    "body": ["async function $1($2) {", "  $0", "}"]
  },
  "Switch Statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:key}) {",
      "  case ${2:value}: {",
      "    $0",
      "    break",
      "  }",
      "  default: {",
      "    break",
      "  }",
      "}"
    ]
  },

  // React
  "Reducer": {
    "prefix": "reducer",
    "body": [
      "function ${1:someReducer}(state, action) {",
      "  switch (action.type) {",
      "    case ${2:'value'}: {",
      "      return $0",
      "    }",
      "    default: {",
      "      throw new Error(`Unhandled action type: ${action.type}`)",
      "    }",
      "  }",
      "}"
    ]
  },
  "React.useState": {
    "prefix": "us",
    "body": ["const [${1:state}, ${2:setState}] = React.useState($3)$0"]
  },
  "React.useEffect": {
    "prefix": "uf",
    "body": ["React.useEffect(() => {", "  $0", "}, [])"]
  },
  "React.useReducer": {
    "prefix": "ur",
    "body": [
      "const [state, dispatch] = React.useReducer(${1:someReducer}, {",
      "  $0",
      "})"
    ]
  },
  "React.useRef": {
    "prefix": "urf",
    "body": ["const ${1:someRef} = React.useRef($2)$0"]
  }
}
